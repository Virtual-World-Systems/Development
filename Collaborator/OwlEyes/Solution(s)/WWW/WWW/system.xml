<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="main.cpp">
	<cpp:include>
		#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file>
	</cpp:include>
	<cpp:include>
		#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file>
	</cpp:include>

	<namespace>
		namespace <name>std</name>
		<block>
			{
			<function>
				<type>
					<name>int</name>
				</type>
				<name>run</name>
				<parameter_list>
					(<parameter>
						<decl>
							<type>
								<name>int</name>
							</type>
							<name>argc</name>
						</decl>
					</parameter>, <parameter>
						<decl>
							<type>
								<name>char</name>
								<modifier>*</modifier>
								<modifier>*</modifier>
							</type>
							<name>argv</name>
						</decl>
					</parameter>)
				</parameter_list>
				<block>
					{<block_content>
						<expr_stmt>
							<expr>
								<name>cout</name>
								<operator>&lt;&lt;</operator>
								<literal type="string">"OSVoice"</literal>
								<operator>&lt;&lt;</operator>
								<name>endl</name>
								<operator>
									&lt;&lt;
								</operator>
								<name>endl</name>
							</expr>;
						</expr_stmt>

						<decl_stmt>
							<decl>
								<type>
									<name>string</name>
								</type>
								<name>prompt</name>
								<argument_list>
									(<argument>
										<expr>
											<literal type="string">"&gt; "</literal>
										</expr>
									</argument>)
								</argument_list>
							</decl>;
						</decl_stmt>
						<expr_stmt>
							<expr>
								<name>cout</name>
								<operator>&lt;&lt;</operator>
								<name>prompt</name>
							</expr>;
						</expr_stmt>

						<for>
							for <control>
								(<init>
									<decl>
										<type>
											<name>string</name>
										</type>
										<name>line</name>
									</decl>;
								</init> <condition>
									<expr>
										<call>
											<name>getline</name>
											<argument_list>
												(<argument>
													<expr>
														<name>
															cin
														</name>
													</expr>
												</argument>, <argument>
													<expr>
														<name>line</name>
													</expr>
												</argument>)
											</argument_list>
										</call>
									</expr>;
								</condition><incr/>)
							</control>
							<block>
								{<block_content>
									<if_stmt>
										<if>
											if <condition>
												(<expr>
													<name>line</name>
													<operator>==</operator>
													<literal type="string">"q"</literal>
												</expr>)
											</condition><block type="pseudo">
												<block_content>
													<return>
														return <expr>
															<literal type="number">0</literal>
														</expr>;
													</return>
												</block_content>
											</block>
										</if>
										<else>
											else
											<block>
												{<block_content>
													<expr_stmt>
														<expr>
															<name>cout</name>
															<operator>&lt;&lt;</operator>
															<literal type="string">" &lt;"</literal>
															<operator>&lt;&lt;</operator>
															<name>line</name>
															<operator>
																&lt;&lt;
															</operator>
															<literal type="string">"&gt;"</literal>
															<operator>&lt;&lt;</operator>
															<name>endl</name>
														</expr>;
													</expr_stmt>
													<block>
														{<block_content>
														</block_content>}
													</block>
												</block_content>}
											</block>
										</else>
									</if_stmt>
									<expr_stmt>
										<expr>
											<name>cout</name>
											<operator>&lt;&lt;</operator>
											<name>prompt</name>
										</expr>;
									</expr_stmt>
								</block_content>}
							</block>
						</for>
						<return>
							return <expr>
								<literal type="number">0</literal>
							</expr>;
						</return>
					</block_content>}
				</block>
			</function>
			}
		</block>
	</namespace>
	<function>
		<type>
			<name>int</name>
		</type>
		<name>main</name>
		<parameter_list>
			(<parameter>
				<decl>
					<type>
						<name>int</name>
					</type>
					<name>argc</name>
				</decl>
			</parameter>, <parameter>
				<decl>
					<type>
						<name>
							c
							har
						</name>
						<modifier>*</modifier>
						<modifier>*</modifier>
					</type>
					<name>argv</name>
				</decl>
			</parameter>)
		</parameter_list>
		<block>
			{<block_content>
				<return>
					return <expr>
						<call>
							<name>
								<name>std</name
>
								<operator>::</operator>
								<name>run</name>
							</name>
							<argument_list>
								(<argument>
									<expr>
										<name>argc</name>
									</expr>
								</argument>, <argument>
									<expr>
										<name>argv</name>
									</expr>
								</argument>)
							</argument_list>
						</call>
					</expr>;
				</return>
			</block_content>}
		</block>
	</function>
</unit>
